//FUNCTIONS PROTOTYPES
void agregarUsuario(uint16_t idUsuario, int socketNbr);
int buscarGrupoUsuario(int aux);
int buscarPosicionUsuario(int aux);
int buscarPosicionPorSocket(int aux);
void publicarContenido(struct protocolo_t *msg);


//------------------------------------------------------------------------------
// Si el usuario no esta en el array lo agrega.
//------------------------------------------------------------------------------
void agregarUsuario(uint16_t idUsuario, int socketNbr) {
	int pos=0, userPos=0;
	
	userPos = buscarPosicionUsuario(idUsuario);
	//Si el usuario aun no fue agregado lo agrega
	if(userPos == -1) {
		pos = getPosUserArray();
		usersArray[pos].socketNumber = socketNbr; //agregarlo en la ultima pos disponible
		usersArray[pos].idUsuario = idUsuario;
	}
	//Si ya existe es una reconexion
	else {
		usersArray[userPos].socketNumber = socketNbr;	//Solo actualiza el socket
	}

}



//------------------------------------------------------------------------------
// Busca usuario por id, si lo encuentra retorna posicion en el array, sino -1.
//------------------------------------------------------------------------------
int buscarPosicionUsuario(int aux) {
	int i, ret=-1;
	
	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(usersArray[i].idUsuario == aux) {
			ret = i;
			break;
		}
	}
	return ret;
}

//------------------------------------------------------------------------------
// Busca usuario por socket, si lo encuentra retorna posicion en el array, sino -1.
//------------------------------------------------------------------------------
int buscarPosicionPorSocket(int aux) {
	int i, ret=-1;
	
	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(usersArray[i].socketNumber == aux) {
			ret = i;
			break;
		}
	}
	return ret;
}

int getPosUserArray()
{
	int i, ret=-1;
	for(i=0;i< MAX_CONNECTIONS;i++) {
			if(usersArray[i].socketNumber == 0 && usersArray[i].idUsuario == 0) {
				ret = i;
				break;
			}
		}
	return ret;
}

void publicarContenido(struct protocolo_t *msg)
{
	int i, posContent=0;
	posContent = getPosContentArray();
	for(i=0; i < sizeof(msg->MSG);i++)
	{
		contentsArray[posContent].path[i]=msg->MSG[i];
			contentsArray[posContent].bytes[i]=msg->MSG[i];
	}

	contentsArray[posContent].propietario=msg->ID_USER;
}

int getPosContentArray()
{
	int i, ret=-1;
		for(i=0;i< MAX_CONTENTS;i++) {
			if(contentsArray[i].path == 0 && contentsArray[i].bytes == 0) {
					ret = i;
					break;
				}
			}
		return ret;
}





