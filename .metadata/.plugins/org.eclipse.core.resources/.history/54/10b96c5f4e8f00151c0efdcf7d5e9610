//FUNCTIONS PROTOTYPES
void agregarUsuario(uint16_t idUsuario, int socketNbr);
int buscarGrupoUsuario(int aux);
int buscarPosicionUsuario(int aux);
int buscarPosicionPorSocket(int aux);
void publicarContenido(struct protocolo_t *msg);
void consultarContenido(int sd,struct protocolo_t *msg);
int getPosContentArray();


//------------------------------------------------------------------------------
// Si el usuario no esta en el array lo agrega.
//------------------------------------------------------------------------------
void agregarUsuario(uint16_t idUsuario, int socketNbr) {
	int pos=0, userPos=0;

	userPos = buscarPosicionUsuario(idUsuario);
	//Si el usuario aun no fue agregado lo agrega
	if(userPos == -1) {
		pos = getPosUserArray();
		usersArray[pos].socketNumber = socketNbr; //agregarlo en la ultima pos disponible
		usersArray[pos].idUsuario = idUsuario;
	}
	//Si ya existe es una reconexion
	else {
		usersArray[userPos].socketNumber = socketNbr;	//Solo actualiza el socket
	}

}



//------------------------------------------------------------------------------
// Busca usuario por id, si lo encuentra retorna posicion en el array, sino -1.
//------------------------------------------------------------------------------
int buscarPosicionUsuario(int aux) {
	int i, ret=-1;

	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(usersArray[i].idUsuario == aux) {
			ret = i;
			break;
		}
	}
	return ret;
}

//------------------------------------------------------------------------------
// Busca usuario por socket, si lo encuentra retorna posicion en el array, sino -1.
//------------------------------------------------------------------------------
int buscarPosicionPorSocket(int aux) {
	int i, ret=-1;

	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(usersArray[i].socketNumber == aux) {
			ret = i;
			break;
		}
	}
	return ret;
}

int getPosUserArray()
{
	int i, ret=-1;
	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(usersArray[i].socketNumber == 0 && usersArray[i].idUsuario == 0) {
			ret = i;
			break;
		}
	}
	return ret;
}

void publicarContenido(struct protocolo_t *msg)
{
	int i,act, posContent=0;
	data_t data;
	posContent = getPosContentArray();

	data.count = msg->MSG[0];
	data.det.lent = msg->MSG[1];
	act =2;
	for(i=0; i <  data.det.lent;i++){
		data.det.title[i]=msg->MSG[i+act];
	}
	act += data.det.lent;
	data.det.lena=msg->MSG[act];
	act++;

	for(i=0; i <  data.det.lena;i++){
		data.det.aut[i]=msg->MSG[i+act];
	}
	act += data.det.lena;
	data.det.lend=msg->MSG[act];
	act++;

	for(i=0; i <  data.det.lend;i++){
		data.det.desc[i]=msg->MSG[i+act];
	}



	contentsArray[posContent].propietario=msg->ID_USER;
	contentsArray[posContent].det=data.det;
}

int getPosContentArray()
{
	int i, ret=-1;
	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(contentsArray[i].propietario == 0) {
			ret = i;
			break;
		}
	}
	return ret;
}

void consultarContenido(int sd,struct protocolo_t *msg)
{

	int i,j;
	msg->LEN=4;
	msg->ID_USER=(uint16_t) ~((unsigned int) sd);
	msg->TYPE=0;
	for(i=0;i< MAX_CONNECTIONS;i++) {
		if(contentsArray[i].propietario == 0) {
			break;
		}

		msg->MSG[i]= (char)contentsArray[i].propietario;


	}

	msg->MSG[i]='\0';
	writeMsg(sd, msg);
}





