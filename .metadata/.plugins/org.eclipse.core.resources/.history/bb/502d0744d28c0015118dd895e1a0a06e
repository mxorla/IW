//------------------------------------------------------------------------------
// Lee un mensaje de aplicacion completo. Recibe en auxBuf y lo copia a
// la estructura msg. Retorna la cantidad de bytes leidos o 0 si se cerro el socket.
//------------------------------------------------------------------------------
int readMsg(int sd, struct protocolo_t *msg) {
	unsigned char totalLen, pos=0, userPos, groupPos, msgPos;
	char auxBuf[512];
	char *ptr=0;
	int j, counter=0, bytes=1, buffered=0;	
		
	for(j=0;j<512;j++)
		auxBuf[j] = 0x00;
		
	ptr = auxBuf;
	
	//Recibe el primer byte (longitud total del mensaje)
	if(recv(sd, ptr, 1, 0)==0)	//si recv retorna 0: indica que el socket fue cerrado
		return 0;

	//Evalua longitud total del mensaje
	totalLen = auxBuf[0];
	ptr++;
	pos++;
		
	//Se asegura de recibe lo que resta del mensaje
	while ((buffered < totalLen - 1) && (bytes > 0)) {
		bytes = recv(sd, ptr + buffered , totalLen - buffered, 0);
		buffered = buffered + bytes;
		if(bytes == 0)			//si recv retorna 0: indica que el socket fue cerrado
			return 0;
	}
	
	//Espera encontrar 5 caracteres '\0'
	/*while (counter < 5) {
		if(auxBuf[pos] == '\0') {		
			counter++;
			if(counter == 2)
				userPos = pos;
			else if	(counter == 4)
				groupPos = pos;
			else if(counter == 5)
				msgPos = pos;
		}
		ptr++;
		pos++;
	}*/
		
	totalLen = auxBuf[0];
	memcpy(&msg->ID_USER, &auxBuf[1], sizeof(uint16_t));
	memcpy(&msg->TYPE, &auxBuf[3], userPos-3);

	memcpy(&msg->MSG, &auxBuf[userPos+1], sizeof(uint16_t));
		
    return totalLen;
}

//------------------------------------------------------------------------------
// Escribe un mensaje de aplicacion completo. Recibe en msg y lo copia 
// al auxBuf. Retorna el resultado del send.
//------------------------------------------------------------------------------
int writeMsg(int sd, struct protocolo_t *msg) {
	char txBuf[P_SIZE];
	unsigned char typeLen, msgLen, totalLen, idUserLength;
	
	//Calcula longitud del mensaje

	msgLen = strlen(msg->MSG);

	totalLen = 4 +  msgLen;
	idUserLength=sizeof(msg->ID_USER);
		
	//Arma el mensaje de longitud variable en el buffer de transmisiï¿½n
		txBuf[0] = totalLen;											//Escribe longitud en el buffer
		memcpy(&txBuf[1], &msg->ID_USER, idUserLength);
		memcpy(&txBuf[2], &msg->TYPE, sizeof(char));
		memcpy(&txBuf[3], &msg->MSG, msgLen);
		txBuf[totalLen+1] = '\0';										//Escribe fin


	return send(sd, txBuf, totalLen, 0);
}
